name: Deploy to AWS App Runner

on:
  workflow_dispatch:  # Enable manual trigger
    inputs:
      environment:
        description: 'Deployment environment'
        required: false
        default: 'production'
        type: choice
        options:
        - production
        - staging
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '*.md'

env:
  AWS_REGION: ap-southeast-2
  ECR_REPOSITORY: permit-api
  IMAGE_TAG: ${{ github.sha }}

jobs:
  deploy:
    name: Build and Deploy to App Runner
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Create ECR repository if not exists
      run: |
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region $AWS_REGION || \
        aws ecr create-repository --repository-name $ECR_REPOSITORY --region $AWS_REGION

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        # Build Docker image
        docker build -f Dockerfile.apprunner -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -f Dockerfile.apprunner -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        # Push to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "Image URI: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Create apprunner.yaml for ECR deployment
      run: |
        cat > apprunner-ecr.yaml << EOF
        version: 1.0
        runtime: docker
        build:
          commands:
            build:
              - echo "Using pre-built Docker image"
        run:
          runtime-version: latest
          command: python run_server.py
          network:
            port: 8000
            env: PORT
          env:
            - name: FLASK_ENV
              value: "production"
            - name: FLASK_DEBUG  
              value: "0"
            - name: PORT
              value: "8000"
            - name: API_KEYS
              value: "demo_basic_key:DemoBasic:basic,demo_premium_key:DemoPremium:premium"
            - name: MASTER_API_KEY
              value: "demo_master_key_12345"
            - name: LOG_LEVEL
              value: "INFO"
        EOF

    - name: Deploy to App Runner (if service exists)
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        # Check if App Runner service exists
        SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='permit-api-service'].ServiceArn | [0]" --output text --region $AWS_REGION)
        
        if [ "$SERVICE_ARN" != "None" ] && [ "$SERVICE_ARN" != "" ]; then
          echo "Updating existing App Runner service..."
          aws apprunner start-deployment --service-arn $SERVICE_ARN --region $AWS_REGION
          echo "Deployment started for service: $SERVICE_ARN"
        else
          echo "No existing App Runner service found. Please create service manually using:"
          echo "Image URI: $ECR_REGISTRY/$ECR_REPOSITORY:latest"
        fi

    - name: Output deployment info
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        echo "ðŸš€ Deployment completed!"
        echo "ðŸ“¦ Docker Image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        echo "ðŸ”— Use this image URI in App Runner console: $ECR_REGISTRY/$ECR_REPOSITORY:latest"
